version: '3.8'

services:

  mysql_db: 
    image: "mysql:latest"
    environment:
      MYSQL_ROOT_PASSWORD: Password123!
    volumes:
      - db-data:/foo
      - ./scripts:/docker-entrypoint-initdb.d 
    ports:
      - 3306
    networks:
      - project_network

  storage:
    build: ./Storage
    ports:
      # - '8090:8090'
      - '8090'
    networks:
      # - project_network
      - api.network
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/ubuntu/config/storage:/config
      - /home/ubuntu/logs:/logs

  reciever:
    build: ./Receiver
    ports:
      # - "8080:8080"
      - "8080"
    networks:
      # - project_network
      - api.network
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/ubuntu/config/reciever:/config
      - /home/ubuntu/logs:/logs

  processing:
    build: ./Processing 
    ports:
      # - '8100:8100'
      - '8100'
    networks:
      # - project_network
      - api.network
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/ubuntu/config/processing:/config
      - /home/ubuntu/logs:/logs
      - processing-db:/data
      
  audit:
    build: ./Audit 
    ports:
      # - '8110:8110'
      - '8110'
    networks:
      # - project_network
      - api.network
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/ubuntu/config/audit_log:/config
      - /home/ubuntu/logs:/logs

  dashboard:
    build: ./Dashboard
    ports:
      # - '4173:4173'
      - '4173'
    networks:
      # - project_network
      - api.network
      
  nginx: 
    image: nginx:latest 
    # Connects the conf file of the container to the conf file in our folder 
    volumes: 
      - /<Your Home Directory>/nginx/nginx.conf:/etc/nginx/nginx.conf:ro 
    # It will start up the nginx only when all api containers have started 
    depends_on: 
      - receiver 
      - storage 
      - processing 
      - audit
      - dashboard 
    # Connects the port 80 of the nginx container to localhost:80 or localhost 
    ports: 
      - "80:80" 
    networks: 
      - "api.network"

volumes:
  db-data:
  processing-db:

networks:
  project_network:
  api.network: